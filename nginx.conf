pid /tmp/nginx.pid;

error_log stderr warn;

worker_processes 1;

events { worker_connections 1024; }

http {

    # List of application servers
    upstream CONTENT {
        server docs-app:8080;
    }
    upstream APISPEC {
        server api-spec-app:8000;
    }
    upstream SEARCH {
        server sitesearch-app:9200;
    }

    log_format  custom  '"$request" '
        '$status $body_bytes_sent $request_time '
        '"$remote_addr" "$http_x_forwarded_for" '
        '"$http_user_agent" "$http_referer"';

    # Configuration for the server
    server {

        # Running port
        listen 8000;

        proxy_set_header Host       $http_host;   # required for docker client's sake
        proxy_set_header X-Real-IP  $remote_addr; # pass on real client's IP
        proxy_set_header Authorization "";

        access_log  /dev/stdout  custom;

        client_max_body_size "1m";

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/dotcloud/docker/issues/1486)
        chunked_transfer_encoding on;

        # Redirects template
        rewrite   ^/basics/kubernetes-fundamentals/$                        https://docs.giantswarm.io/basics/kubernetes-resources/                            permanent;
        rewrite   ^/api$                                                    https://docs.giantswarm.io/api/                                                    redirect;
        rewrite   ^/guides/prepare-azure-subscription-for-guest-clusters/$  https://docs.giantswarm.io/guides/prepare-azure-subscription-for-tenant-clusters/  redirect;
        rewrite   ^/guides/prepare-aws-account-for-guest-clusters/$         https://docs.giantswarm.io/guides/prepare-aws-account-for-tenant-clusters/         redirect;
        rewrite   ^/reference/giantswarm-aws-architecture/$                 https://docs.giantswarm.io/basics/aws-architecture/                                redirect;
        rewrite   ^/reference/giantswarm-onprem-architecture/$              https://docs.giantswarm.io/basics/onprem-architecture/                             redirect;

        location /robots.txt {
            root /www;
        }

        # diagnostic ElasticSearch URLs
        location /searchapi/health {
            proxy_pass http://SEARCH/_cluster/health;
            limit_except GET {
                deny all;
            }
        }
        location /searchapi/stats {
            auth_basic "Status Monitoring";
            auth_basic_user_file /etc/nginx/htpasswd_admin;
            proxy_pass http://SEARCH/docs/_stats;
            limit_except GET {
                deny all;
            }
        }
        location /searchapi/status {
            auth_basic "Status Monitoring";
            auth_basic_user_file /etc/nginx/htpasswd_admin;
            proxy_pass http://SEARCH/docs/_status;
            limit_except GET {
                deny all;
            }
        }

        # proxy for search queries
        location /searchapi {
            proxy_pass http://SEARCH/docs/_search;
            limit_except GET POST {
                deny all;
            }
        }

        # Expires headers for static resources
        location /img {
            expires 1d;
            proxy_pass http://CONTENT;
        }
        location /js {
            expires 100d;
            proxy_pass http://CONTENT;
        }
        location /fonts {
            expires 100d;
            proxy_pass http://CONTENT;
        }
        location /css {
            expires 100d;
            proxy_pass http://CONTENT;
        }

        location /_error {
            root /www;
            internal;
        }

        location /healthz {
            add_header Content-Type text/plain;
            return 200 'Doing fine';
        }

        location /api {
            # remove /api prefix from URI
            rewrite ^/api/(.*)$ /$1 break;
            proxy_pass http://APISPEC;
            # Error pages
            proxy_intercept_errors on;
            error_page 403 /_error/403.html;
            error_page 404 /_error/404.html;
            error_page 500 502 503 504 /_error/50x.html;
        }

        location / {
            proxy_pass http://CONTENT;
            # Error pages
            proxy_intercept_errors on;
            error_page 403 /_error/403.html;
            error_page 404 /_error/404.html;
            error_page 500 502 503 504 /_error/50x.html;
        }
    }
}
